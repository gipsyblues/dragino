#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Nov 28 11:55:54 2012
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set ok 0
while { $ok == 0 } {
set timeout 2
spawn telnet 192.168.255.1 9000
match_max 100000
expect "== Executing boot script in" {set ok 1;} TIMEOUT {close; wait;} eof { sleep 1; }
}

set timeout -1
send -- "\003"
expect -exact "^C^C\r
RedBoot> "
send -- "fis init"
expect -exact "fis init"
send -- "\r"
expect -exact "\r
About to initialize \[format\] FLASH image system - continue (y/n)? "
send -- "y\r"
expect -exact "y\r
*** Initialize FLASH Image System\r
... Erase from 0xa87d0000-0xa87e0000: .\r
... Program from 0x80ff0000-0x81000000 at 0xa87d0000: .\r
RedBoot> "
send -- "load -r -b %{FREEMEMLO} openwrt-atheros-vmlinux.lzma"
expect -exact "load -r -b %{FREEMEMLO} openwrt-atheros-vmlinux.lzma"
send -- "\r"
expect -exact "\r
Using default protocol (TFTP)\r
Raw file loaded 0x8003e000-0x8010dfff, assumed entry at 0x8003e000\r
RedBoot> "
send -- "fis create -e 0x80041000 -r 0x80041000 vmlinux.bin.l7"
expect -exact "fis create -e 0x80041000 -r 0x80041000 vmlinux.bin.l7"
send -- "\r"
expect -exact "\r
... Erase from 0xa8030000-0xa8100000: .............\r
... Program from 0x8003e000-0x8010e000 at 0xa8030000: .............\r
... Erase from 0xa87d0000-0xa87e0000: .\r
... Program from 0x80ff0000-0x81000000 at 0xa87d0000: .\r
RedBoot> "
send -- "load -r -b %{FREEMEMLO} openwrt-atheros-root.squashfs"
expect -exact "load -r -b %{FREEMEMLO} openwrt-atheros-root.squashfs"
send -- "\r"
expect -exact "\r
Using default protocol (TFTP)\r
Raw file loaded 0x8003e000-0x803bdfff, assumed entry at 0x8003e000\r
RedBoot> "
send -- "fis create rootfs\r"
expect -exact "fis create rootfs\r
... Erase from 0xa8100000-0xa8480000: ........................................................\r
... Program from 0x8003e000-0x803be000 at 0xa8100000: ........................................................\r
... Erase from 0xa87d0000-0xa87e0000: .\r
... Program from 0x80ff0000-0x81000000 at 0xa87d0000: .\r
RedBoot> "
send -- "reset\r"
expect -exact "reset\r
"
send -- "\035"
expect -exact "^\]\r
telnet> "
send -- "q\r"
expect eof
